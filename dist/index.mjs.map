{"version":3,"sources":["../src/application/useCases/setItem.ts","../src/application/useCases/getItem.ts","../src/application/useCases/index.ts","../src/infrastructure/nativeStorageBridge.ts","../src/infrastructure/storageRepository.ts","../src/presentation/hooks/useStorage.ts","../src/index.ts"],"sourcesContent":["import {SecureStorageRepository} from '@domain/secureStorageRepository';\n\nexport class SetItemStorage {\n  constructor(private repo: SecureStorageRepository) {}\n  execute(key: string, value: string) {\n    return this.repo.setItem(key, value);\n  }\n}\n","import {SecureStorageRepository} from '@domain/secureStorageRepository';\n\nexport class GetItemStorage {\n  constructor(private repo: SecureStorageRepository) {}\n  async execute(key: string) {\n    return await this.repo.getItem(key);\n  }\n}\n","import {SecureStorageRepository} from '@domain/secureStorageRepository';\nimport {SetItemStorage} from './setItem';\nimport {GetItemStorage} from './getItem';\n\nexport const createStorageUC = (repo: SecureStorageRepository) => ({\n  setItem: (key: string, newValue: string) =>\n    new SetItemStorage(repo).execute(key, newValue),\n  getItem: (key: string) => new GetItemStorage(repo).execute(key),\n});\n","import {NativeModules} from 'react-native';\n\nconst {SecureStorageModule} = NativeModules;\n\nexport const nativeStorage = {\n  getItem: async (key: string) => {\n    if (!SecureStorageModule) {\n      throw new Error('SecureStorageModule not available');\n    }\n    return await SecureStorageModule.getItem(key);\n  },\n  setItem: async (key: string, value: string) => {\n    if (!SecureStorageModule) {\n      throw new Error('SecureStorageModule not available');\n    }\n    return await SecureStorageModule.setItem(key, value);\n  },\n};\n","import {SecureStorageRepository} from '@domain/secureStorageRepository';\nimport {nativeStorage} from './nativeStorageBridge';\n\nexport class SecureStorageRepositoryImpl implements SecureStorageRepository {\n  async setItem(key: string, value: string) {\n    return await nativeStorage.setItem(key, value);\n  }\n  async getItem(key: string) {\n    console.log('SecureStorageRepositoryImpl [newValue] ======<', key);\n    const newValue = await nativeStorage.getItem(key);\n    console.log('SecureStorageRepositoryImpl [newValue] ======<', newValue);\n    return newValue ?? null;\n  }\n}\n","import {createStorageUC} from '@application/useCases';\nimport React from 'react';\nimport {SecureStorageRepositoryImpl} from '@infrastructure/storageRepository';\n\nexport const useStorage = (keyName: string) => {\n  const repo = new SecureStorageRepositoryImpl();\n  const createUC = createStorageUC(repo);\n\n  const [value, setValue] = React.useState<string | null>(null);\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const storedValue = await createUC.getItem(keyName);\n      console.log('===>LOADING DATA MOUNTED===>', storedValue);\n      setValue(storedValue);\n      setLoading(false);\n    })();\n  }, [keyName]);\n\n  const updateValue = React.useCallback(\n    (newValue: string) => {\n      createUC.setItem(keyName, newValue);\n      setValue(newValue);\n    },\n    [value, keyName],\n  );\n\n  const refreshValue = React.useCallback(async () => {\n    const newValue = await createUC.getItem(keyName);\n    console.log('REFRESH VALUE', newValue);\n    setValue(newValue);\n  }, [keyName]);\n\n  return {\n    value,\n    updateValue,\n    refreshValue,\n    loading,\n  };\n};\n","import {createStorageUC} from '@application/useCases';\nimport {SecureStorageRepositoryImpl} from '@infrastructure/storageRepository';\n\nconst repo = new SecureStorageRepositoryImpl();\nexport const createUC = createStorageUC(repo);\n\nexport * from '@presentation/hooks/useStorage';\n"],"mappings":"AAEO,IAAMA,EAAN,KAAqB,CAC1B,YAAoBC,EAA+B,CAA/B,UAAAA,CAAgC,CACpD,QAAQC,EAAaC,EAAe,CAClC,OAAO,KAAK,KAAK,QAAQD,EAAKC,CAAK,CACrC,CACF,ECLO,IAAMC,EAAN,KAAqB,CAC1B,YAAoBC,EAA+B,CAA/B,UAAAA,CAAgC,CACpD,MAAM,QAAQC,EAAa,CACzB,OAAO,MAAM,KAAK,KAAK,QAAQA,CAAG,CACpC,CACF,ECHO,IAAMC,EAAmBC,IAAmC,CACjE,QAAS,CAACC,EAAaC,IACrB,IAAIC,EAAeH,CAAI,EAAE,QAAQC,EAAKC,CAAQ,EAChD,QAAUD,GAAgB,IAAIG,EAAeJ,CAAI,EAAE,QAAQC,CAAG,CAChE,GCRA,OAAQ,iBAAAI,MAAoB,eAE5B,GAAM,CAAC,oBAAAC,CAAmB,EAAID,EAEjBE,EAAgB,CAC3B,QAAS,MAAOC,GAAgB,CAC9B,GAAI,CAACF,EACH,MAAM,IAAI,MAAM,mCAAmC,EAErD,OAAO,MAAMA,EAAoB,QAAQE,CAAG,CAC9C,EACA,QAAS,MAAOA,EAAaC,IAAkB,CAC7C,GAAI,CAACH,EACH,MAAM,IAAI,MAAM,mCAAmC,EAErD,OAAO,MAAMA,EAAoB,QAAQE,EAAKC,CAAK,CACrD,CACF,ECdO,IAAMC,EAAN,KAAqE,CAC1E,MAAM,QAAQC,EAAaC,EAAe,CACxC,OAAO,MAAMC,EAAc,QAAQF,EAAKC,CAAK,CAC/C,CACA,MAAM,QAAQD,EAAa,CACzB,QAAQ,IAAI,iDAAkDA,CAAG,EACjE,IAAMG,EAAW,MAAMD,EAAc,QAAQF,CAAG,EAChD,eAAQ,IAAI,iDAAkDG,CAAQ,EAC/DA,GAAY,IACrB,CACF,ECZA,OAAOC,MAAW,QAGX,IAAMC,EAAcC,GAAoB,CAC7C,IAAMC,EAAO,IAAIC,EACXC,EAAWC,EAAgBH,CAAI,EAE/B,CAACI,EAAOC,CAAQ,EAAIC,EAAM,SAAwB,IAAI,EACtD,CAACC,EAASC,CAAU,EAAIF,EAAM,SAAkB,EAAK,EAE3DA,EAAM,UAAU,IAAM,EACnB,SAAY,CACXE,EAAW,EAAI,EACf,IAAMC,EAAc,MAAMP,EAAS,QAAQH,CAAO,EAClD,QAAQ,IAAI,+BAAgCU,CAAW,EACvDJ,EAASI,CAAW,EACpBD,EAAW,EAAK,CAClB,GAAG,CACL,EAAG,CAACT,CAAO,CAAC,EAEZ,IAAMW,EAAcJ,EAAM,YACvBK,GAAqB,CACpBT,EAAS,QAAQH,EAASY,CAAQ,EAClCN,EAASM,CAAQ,CACnB,EACA,CAACP,EAAOL,CAAO,CACjB,EAEMa,EAAeN,EAAM,YAAY,SAAY,CACjD,IAAMK,EAAW,MAAMT,EAAS,QAAQH,CAAO,EAC/C,QAAQ,IAAI,gBAAiBY,CAAQ,EACrCN,EAASM,CAAQ,CACnB,EAAG,CAACZ,CAAO,CAAC,EAEZ,MAAO,CACL,MAAAK,EACA,YAAAM,EACA,aAAAE,EACA,QAAAL,CACF,CACF,ECtCA,IAAMM,EAAO,IAAIC,EACJC,EAAWC,EAAgBH,CAAI","names":["SetItemStorage","repo","key","value","GetItemStorage","repo","key","createStorageUC","repo","key","newValue","SetItemStorage","GetItemStorage","NativeModules","SecureStorageModule","nativeStorage","key","value","SecureStorageRepositoryImpl","key","value","nativeStorage","newValue","React","useStorage","keyName","repo","SecureStorageRepositoryImpl","createUC","createStorageUC","value","setValue","React","loading","setLoading","storedValue","updateValue","newValue","refreshValue","repo","SecureStorageRepositoryImpl","createUC","createStorageUC"]}